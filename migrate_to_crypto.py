#!/usr/bin/env python3
"""
Script de migra√ß√£o para FreeRDP-GUI v2.0
Migra senhas do keyring para o novo sistema de criptografia
"""

import sys
import logging
from pathlib import Path

# Adicionar diret√≥rio do projeto
PROJECT_ROOT = Path(__file__).parent
sys.path.insert(0, str(PROJECT_ROOT))

from core.utils import setup_logging
from core.servidores import get_servidor_manager
from core.crypto import get_crypto_manager
from gui.master_password_dialog import solicitar_master_password

def main():
    """Fun√ß√£o principal de migra√ß√£o"""
    print("=" * 60)
    print("FreeRDP-GUI v2.0 - Script de Migra√ß√£o")
    print("=" * 60)
    print()
    
    # Configurar logging
    logger = setup_logging()
    
    try:
        import keyring
    except ImportError:
        print("‚ùå Keyring n√£o est√° dispon√≠vel. Nada para migrar.")
        return 0
    
    # Inicializar managers
    servidor_manager = get_servidor_manager()
    crypto_manager = get_crypto_manager()
    
    # Verificar se h√° senhas no keyring para migrar
    servidores = servidor_manager.carregar_servidores()
    senhas_encontradas = []
    
    print("üîç Procurando senhas no keyring...")
    
    for nome_servidor, (ip, usuario) in servidores.items():
        if nome_servidor == "Manual":
            continue
        
        try:
            senha = keyring.get_password(nome_servidor, usuario)
            if senha:
                senhas_encontradas.append((nome_servidor, usuario, senha))
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro ao verificar {nome_servidor}: {e}")
    
    if not senhas_encontradas:
        print("‚úÖ Nenhuma senha encontrada no keyring. Migra√ß√£o n√£o necess√°ria.")
        return 0
    
    print(f"üì¶ Encontradas {len(senhas_encontradas)} senhas para migrar:")
    for nome, usuario, _ in senhas_encontradas:
        print(f"   ‚Ä¢ {nome} ({usuario})")
    
    print()
    resposta = input("Deseja continuar com a migra√ß√£o? (s/N): ").lower().strip()
    if resposta != 's':
        print("‚ùå Migra√ß√£o cancelada.")
        return 0
    
    # Solicitar master password
    print("\nüîê Configurando master password para o novo sistema...")
    
    # Tentar usar interface gr√°fica se dispon√≠vel
    try:
        from PySide6.QtWidgets import QApplication
        app = QApplication.instance() or QApplication(sys.argv)
        
        senha_master = solicitar_master_password(None, is_first_time=True)
        if not senha_master:
            print("‚ùå Master password √© obrigat√≥ria para migra√ß√£o.")
            return 1
    except:
        # Fallback para interface de linha de comando
        import getpass
        while True:
            senha_master = getpass.getpass("Digite a nova master password: ")
            if not senha_master:
                print("‚ùå Senha n√£o pode estar vazia.")
                continue
            
            confirma = getpass.getpass("Confirme a master password: ")
            if senha_master != confirma:
                print("‚ùå Senhas n√£o conferem.")
                continue
            
            if len(senha_master) < 8:
                resposta = input("‚ö†Ô∏è  Senha tem menos de 8 caracteres. Continuar? (s/N): ")
                if resposta.lower().strip() != 's':
                    continue
            
            break
        
        # Configurar master password
        if not crypto_manager.set_master_password(senha_master):
            print("‚ùå Erro ao configurar master password.")
            return 1
    
    print("‚úÖ Master password configurada com sucesso.")
    
    # Migrar senhas
    print("\nüì¶ Migrando senhas...")
    migradas = 0
    erros = 0
    
    for nome_servidor, usuario, senha in senhas_encontradas:
        try:
            print(f"   Migrando {nome_servidor}...", end=" ")
            
            # Salvar no novo sistema
            if servidor_manager.salvar_senha(nome_servidor, senha):
                # Remover do keyring
                try:
                    keyring.delete_password(nome_servidor, usuario)
                    print("‚úÖ")
                    migradas += 1
                except Exception as e:
                    print(f"‚ö†Ô∏è  (salva mas erro ao remover do keyring: {e})")
                    migradas += 1
            else:
                print("‚ùå")
                erros += 1
                
        except Exception as e:
            print(f"‚ùå Erro: {e}")
            erros += 1
    
    print()
    print("=" * 60)
    print("RESULTADO DA MIGRA√á√ÉO")
    print("=" * 60)
    print(f"‚úÖ Senhas migradas com sucesso: {migradas}")
    if erros > 0:
        print(f"‚ùå Erros: {erros}")
    print()
    
    if migradas > 0:
        print("üéâ Migra√ß√£o conclu√≠da com sucesso!")
        print("   ‚Ä¢ Suas senhas agora est√£o criptografadas localmente")
        print("   ‚Ä¢ N√£o dependem mais do keyring do sistema")
        print("   ‚Ä¢ S√£o port√°veis entre diferentes distribui√ß√µes")
        print()
        print("üí° Dicas:")
        print("   ‚Ä¢ Fa√ßa backup do arquivo 'servidores.ini'")
        print("   ‚Ä¢ Lembre-se da master password")
        print("   ‚Ä¢ O arquivo '.master_salt' tamb√©m √© importante")
        
        # Verificar se migra√ß√£o foi bem sucedida
        print("\nüîç Verificando migra√ß√£o...")
        verificacao_ok = True
        
        for nome_servidor, usuario, senha_original in senhas_encontradas:
            senha_recuperada = servidor_manager.obter_senha(nome_servidor)
            if senha_recuperada != senha_original:
                print(f"‚ùå Erro na verifica√ß√£o de {nome_servidor}")
                verificacao_ok = False
        
        if verificacao_ok:
            print("‚úÖ Verifica√ß√£o conclu√≠da - todas as senhas foram migradas corretamente!")
        else:
            print("‚ö†Ô∏è  Algumas senhas podem n√£o ter sido migradas corretamente.")
    else:
        print("‚ùå Nenhuma senha foi migrada.")
        return 1
    
    return 0

if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n‚ùå Migra√ß√£o interrompida pelo usu√°rio.")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        sys.exit(1)